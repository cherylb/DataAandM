
#1 Load data and relationships: I didn't make any changes to the CSV files, I did use merge to create distinct nodes and used a foreach case to create relationships for enrolled vs. completed.

Create Students nodes
load csv with headers from "file:///C:/Users/Cheryl/Downloads/week-12-quiz-data-students-and-housing.csv" as students create (s1:Student {firstname:students.GivenName, lastname:students.Surname, id:students.ID, gender:students.Gender, address: students.StreetAddress, city:students.City, state:students.State, zipcode:students.ZipCode, phone:students.TelephoneNumber})

Create Dormitory nodes
load csv with headers from "file:///C:/Users/Cheryl/Downloads/week-12-quiz-data-students-and-housing.csv" as dorms merge  (d1:Dormitory {name:dorms.Dormitory})

Create Course nodes
load csv with headers from "file:///C:/Users/Cheryl/Downloads/week-12-quiz-data-courses.csv" as course merge (c1:Course{department:course.CourseDept, number:course.CourseNumber, title:course.CourseName})

Create enrolled relationships
load csv with headers from "file:///C:/Users/Cheryl/Downloads/week-12-quiz-data-courses.csv" as enroll
match (a: Student {id: enroll.ID}),(b: Course{number: enroll.CourseNumber}) 
foreach(n IN (CASE when enroll.Grade = 'IP' then [1] else [] END)
	merge (a)-[r: enrolled {section: enroll.Section, grade: enroll.Grade, instructor: enroll.Instructor}]->(b))

Create completed relationships
load csv with headers from "file:///C:/Users/Cheryl/Downloads/week-12-quiz-data-courses.csv" as enroll
match (a: Student {id: enroll.ID}),(b: Course{number: enroll.CourseNumber}) 
foreach(n IN (CASE when enroll.Grade <> 'IP' then [1] else [] END)
	merge (a)-[r:completed  {section: enroll.Section, grade: enroll.Grade, instructor: enroll.Instructor}]->(b))

Create dorm relationships
load csv with headers from "file:///C:/Users/Cheryl/Downloads/week-12-quiz-data-students-and-housing.csv" as dms
match (a: Student {id: dms.ID}),(b: Dormitory{name: dms.Dormitory}) 
create (a) - [r: housed {room: dms.Room}] -> (b)

#2 - Compare to sql database
Determining if an SQL database might be a better solution than this graph database depends on the main purpose of the database. If the purpose is to track student information, then the first-degree relationships between student and courses or other information are important, but the nth degree relationships are not relevant. There would likely be the same information tracked for every student.  In this case a more linear and rigid SQL structure may be most appropriate. However, if the main purpose of this database is to facilitate connections between students in the same courses, or understand the relationships between housemates, then the emphasis is on the connections between things, and the chain of relationships becomes critical. In that case, the graphical database is much more fitting because the relationships are the focus of that design, and it allows a great deal of flexibility in how they are created and followed.

#3 finding roomates for Richard
match(Student {lastname: 'Kowalski'}) - [:housed] -()-[:housed]-(roomy)
return roomy

#4 recording completed grade for Richard
match(Student {lastname: 'Kowalski'}) - [r: enrolled {section: '12136'}] - ( course) 
create (Student) - [r2: completed {section: r.section, instructor: r.instructor, grade:"B"}] -> (course) 
set r2 = r 
with r delete r